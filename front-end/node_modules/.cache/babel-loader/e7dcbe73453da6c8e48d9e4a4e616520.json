{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\TL19-14\\\\front-end\\\\src\\\\ATLchart_date.js\";\nimport React, { Component } from 'react'; // import Select, { components } from 'react-select';\n// import Dropdown from 'react-dropdown';\n\nimport 'react-dropdown/style.css';\nimport { Bar } from 'react-chartjs-2'; //Γκρινιάζει οτι δεν χρησιμοποιώ το React kai to var jsondata\n// function getJson_forecasted(arr){\n//     var c=[];\n//     for (var i = 0; i < arr.length; i++){\n//        c.push(arr[i].DayAheadTotalLoadForecastValue);\n//   }return c;}\n\nfunction getJson_actual(arr) {\n  var p = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    p.push(arr[i].ActualTotalLoadValue);\n  }\n\n  return p;\n}\n\nfunction getJson_date(arr) {\n  var d = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    d.push(arr[i].DateTimeUTC);\n    console.log(arr[i].DateTimeUTC);\n  }\n\n  return d;\n}\n\nfunction clrs1(arr) {\n  var color = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    color.push('rgba(255, 99, 132, 0.6)');\n  }\n\n  return color;\n}\n\nfunction getJson_country(arr) {\n  var country = arr[0].AreaName;\n  return country;\n}\n\nfunction getJson_mapcode(arr) {\n  var map = arr[0].MapCode;\n  return map;\n}\n\nfunction getJson_day(arr) {\n  var da = arr[0].Day;\n  return da;\n}\n\nfunction getJson_year(arr) {\n  var y = arr[0].Year;\n  return y;\n}\n\nfunction getJson_month(arr) {\n  var m = arr[0].Month;\n  return m;\n}\n\nclass ATLchart_date extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showdata = () => {\n      var testobj = localStorage.getItem('data');\n      var jsondata = JSON.parse(testobj); //Μπορει και να θέλετε με JSON.stringify\n\n      console.log(\"IS THIS REAL LIFE\");\n      console.log(jsondata);\n      console.log(JSON.stringify(JSON.parse(testobj))); //όπως εδω\n\n      return JSON.parse(testobj);\n    };\n\n    this.state = {\n      chartData: {\n        labels: getJson_date(this.showdata()),\n        datasets: [{\n          label: 'Πραγματικό Φορτίο (MWh)',\n          data: getJson_actual(this.showdata()),\n          backgroundColor: clrs1(this.showdata()) //     },\n          //     {\n          //       label:'2 Population',\n          //       data:getJson_forecasted(this.showdata()),\n          //       backgroundColor:[\n          //           'rgba(54, 162, 235, 0.6)',\n          //           'rgba(54, 162, 235, 0.6)',\n          //           'rgba(54, 162, 235, 0.6)'\n          //       ]\n          //   }\n\n        }]\n      },\n      country: getJson_country(this.showdata()),\n      mapcode: getJson_mapcode(this.showdata()),\n      day: getJson_day(this.showdata()),\n      month: getJson_month(this.showdata()),\n      year: getJson_year(this.showdata())\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: this.state.chartData,\n      width: 100,\n      height: 50,\n      options: {\n        responsive: true,\n        title: {\n          display: this.props.displayTitle,\n          text: 'Actual Total Load in ' + this.state.country + ' (' + this.state.mapcode + ') on ' + this.state.day + '/' + this.state.month + '/' + this.state.year,\n          fontSize: 25\n        },\n        legend: {\n          display: this.props.displayLegend,\n          position: this.props.legendPosition\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nATLchart_date.defaultProps = {\n  displayTitle: true,\n  displayLegend: true,\n  legendPosition: 'right'\n};\nexport default ATLchart_date;","map":{"version":3,"sources":["C:/Users/chris/Desktop/TL19-14/front-end/src/ATLchart_date.js"],"names":["React","Component","Bar","getJson_actual","arr","p","i","length","push","ActualTotalLoadValue","getJson_date","d","DateTimeUTC","console","log","clrs1","color","getJson_country","country","AreaName","getJson_mapcode","map","MapCode","getJson_day","da","Day","getJson_year","y","Year","getJson_month","m","Month","ATLchart_date","constructor","props","showdata","testobj","localStorage","getItem","jsondata","JSON","parse","stringify","state","chartData","labels","datasets","label","data","backgroundColor","mapcode","day","month","year","render","responsive","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import Select, { components } from 'react-select';\r\n// import Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport {Bar} from 'react-chartjs-2';\r\n//Γκρινιάζει οτι δεν χρησιμοποιώ το React kai to var jsondata\r\n\r\n// function getJson_forecasted(arr){\r\n//     var c=[];\r\n//     for (var i = 0; i < arr.length; i++){\r\n//        c.push(arr[i].DayAheadTotalLoadForecastValue);\r\n//   }return c;}\r\n\r\nfunction getJson_actual(arr){\r\n    var p=[];\r\n    for (var i = 0; i < arr.length; i++){\r\n      p.push(arr[i].ActualTotalLoadValue);\r\n  }return p;}\r\n\r\nfunction getJson_date(arr){\r\n    var d=[];\r\n    for (var i = 0; i < arr.length; i++){\r\n      d.push(arr[i].DateTimeUTC);\r\n      console.log(arr[i].DateTimeUTC)\r\n  }return d;}\r\n\r\nfunction clrs1(arr){\r\n    var color=[];\r\n    for (var i=0; i< arr.length; i++){\r\n        color.push('rgba(255, 99, 132, 0.6)')\r\n    }return color;\r\n}\r\nfunction getJson_country(arr){\r\n    var country=arr[0].AreaName\r\n    return country;\r\n}\r\nfunction getJson_mapcode(arr){\r\n    var map=arr[0].MapCode\r\n    return map;\r\n}\r\nfunction getJson_day(arr){\r\n    var da=arr[0].Day\r\n    return da;\r\n}\r\nfunction getJson_year(arr){\r\n    var y=arr[0].Year\r\n    return y;\r\n}\r\nfunction getJson_month(arr){\r\n    var m=arr[0].Month\r\n    return m;\r\n}\r\nclass ATLchart_date extends Component {    constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        chartData: {\r\n            labels:getJson_date(this.showdata()),\r\n            datasets:[\r\n                {\r\n                    label:'Πραγματικό Φορτίο (MWh)',\r\n                    data:getJson_actual(this.showdata()),\r\n                    backgroundColor:clrs1(this.showdata())\r\n            //     },\r\n            //     {\r\n            //       label:'2 Population',\r\n            //       data:getJson_forecasted(this.showdata()),\r\n            //       backgroundColor:[\r\n            //           'rgba(54, 162, 235, 0.6)',\r\n            //           'rgba(54, 162, 235, 0.6)',\r\n            //           'rgba(54, 162, 235, 0.6)'\r\n            //       ]\r\n            //   }\r\n                }]\r\n        },\r\n        country: getJson_country(this.showdata()),\r\n        mapcode: getJson_mapcode(this.showdata()),\r\n        day: getJson_day(this.showdata()),\r\n        month: getJson_month(this.showdata()),\r\n        year: getJson_year(this.showdata())\r\n    }\r\n}\r\nshowdata=()=>{\r\n        var testobj=localStorage.getItem('data');\r\n        var jsondata=JSON.parse(testobj);   //Μπορει και να θέλετε με JSON.stringify\r\n        console.log(\"IS THIS REAL LIFE\")\r\n        console.log(jsondata);\r\n        console.log(JSON.stringify(JSON.parse(testobj)))  //όπως εδω\r\n        return JSON.parse(testobj);\r\n        }\r\nstatic defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend:true,\r\n    legendPosition:'right',\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n            <Bar\r\n                data={this.state.chartData}\r\n                width={100}\r\n                height={50}\r\n                options={{\r\n                    responsive:true,\r\n                    title:{\r\n                        display:this.props.displayTitle,\r\n                        text: 'Actual Total Load in '+this.state.country+' ('+this.state.mapcode+') on '+this.state.day+'/'+this.state.month+'/'+this.state.year,\r\n                        fontSize:25\r\n                    },\r\n                    legend:{\r\n                        display:this.props.displayLegend,\r\n                        position: this.props.legendPosition\r\n                    }\r\n                }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n export default ATLchart_date;"]},"metadata":{},"sourceType":"module"}